{"version":3,"sources":["scripts.js"],"names":["$","Settings","_this","this","_classCallCheck","addForm","event","row","list","find","length","is","replaceWith","cloneForm","removeForm","insertBefore","html","editForm","preventDefault","target","parents","insertAfter","populateForm","removeClass","remove","wrapper","clone","form","each","field","attr","val","removeAttr","save","spinner","button","notice","formData","serializeArray","reduce","o","i","_extends","_defineProperty","name","value","addClass","request","ajax","url","ajaxurl","dataType","data","nonce","apison","action","fields","done","_ref","status","updateRow","fail","always","delete","confirm","id","hasClass","_ref2","removeRow","_ref3","_ref3$formData$id","undefined","prepend","on","jQuery"],"mappings":"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","file":"scripts.min.js","sourcesContent":["/**\n * Apison scripts\n */\n\n(function ($) {\n\n    // Handle the settings page\n    class Settings {\n\n        constructor() {\n            this.wrapper = $('#apison')\n            this.list = $('#the-list')\n\n            // Manage form display\n            this.wrapper.on('click', '.apison-add', this.addForm)\n            this.wrapper.on('click', '.apison-edit', this.editForm)\n            this.wrapper.on('click', '.apison-cancel', this.removeForm)\n\n            // Manage for actions\n            this.wrapper.on('submit', '.apison-form', this.save)\n            this.wrapper.on('click', '.apison-delete', this.delete)\n        }\n\n        /**\n         * Show the add new form\n         *\n         * @param {object} event\n         */\n        addForm = (event) => {\n            const row = this.list.find('tr:first-child')\n\n            if (! row.length) {\n                this.list.html($(this.cloneForm()))\n            }\n            else if (row.is('.no-items')) {\n                row.replaceWith($(this.cloneForm()))\n            }\n            else if (! row.is('.apison-form')) {\n                this.removeForm()\n                $(this.cloneForm()).insertBefore(row)\n            }\n        }\n\n        /**\n         * Show the edit form\n         *\n         * @param {object} event\n         */\n        editForm = (event) => {\n            event.preventDefault()\n            const row = $(event.target).parents('tr')\n\n            this.removeForm()\n            $(this.cloneForm()).insertAfter(row)\n            this.populateForm(row)\n\n            this.list.find('.apison-delete').removeClass('hidden')\n        }\n\n        /**\n         * Remove the edit form\n         */\n        removeForm = () => {\n            this.list.find('.apison-form').remove()\n        }\n\n        /**\n         * Clone the edit form\n         *\n         * @return {object} clone\n         */\n        cloneForm = () => {\n            return this.wrapper.find('.apison-form').clone(true)\n        }\n\n        /**\n         * Populate the edit form\n         *\n         * @param {object} row\n         */\n        populateForm = (row) => {\n            const form = this.list.find('.apison-form')\n\n            row.find('input[type=hidden]').each(function() {\n                const field = form.find(`.apison-input[name=\"${$(this).attr('name')}\"]`)\n\n                if (field.is('input:checkbox') && ! $(this).val()) {\n                    field.removeAttr('checked')\n                } else {\n                    field.val($(this).val())\n                }\n            })\n\n            form.find('input[name=id]').val(row.find('input[name=slug]').val())\n        }\n\n        /**\n         * Save the form data\n         *\n         * @param {object} event\n         */\n        save = (event) => {\n            event.preventDefault()\n            const form = $(event.target)\n            const spinner = form.find('.spinner')\n            const button = form.find('.apison-save')\n            const notice = form.find('.apison-notice')\n            // Get form data and convert to a single object\n            const formData = form.serializeArray().reduce((o, i) => ({ ...o, [i.name]: i.value }), {})\n\n            spinner.addClass('is-active')\n            button.attr('disabled', 'disabled')\n\n            const request = $.ajax({\n                url: ajaxurl,\n                dataType: 'json',\n                data: {\n                    nonce: apison.nonce,\n                    action: 'apison_save',\n                    fields: formData\n                }\n            })\n\n            request.done(({ status, data }) => {\n                if (status === 'success') {\n                    this.removeForm()\n                    this.updateRow({ formData, data })\n                } else {\n                    notice.find('.error').html(data)\n                    notice.removeClass('hidden').addClass('notice')\n                }\n            })\n            request.fail((data) => {\n                notice.removeClass('hidden').addClass('notice')\n            })\n            request.always((data) => {\n                button.removeAttr('disabled')\n                spinner.removeClass('is-active')\n            })\n        }\n\n        /**\n         * Delete the endpoint, this requires a second click for confirmation\n         */\n        delete = (event) => {\n            const form = $(event.target).parents('.apison-form')\n            const spinner = form.find('.spinner')\n            const button = form.find('.apsion-delete')\n            const notice = form.find('.apison-notice')\n            const confirm = form.find('.apison-confirm')\n            const id = form.find('input[name=id]').val()\n\n            if (confirm.hasClass('hidden')) {\n                confirm.removeClass('hidden')\n            } else {\n                spinner.addClass('is-active')\n                button.attr('disabled', 'disabled')\n\n                const request = $.ajax({\n                    url: ajaxurl,\n                    dataType: 'json',\n                    data: {\n                        id,\n                        nonce: apison.nonce,\n                        action: 'apison_delete'\n                    }\n                })\n\n                request.done(({ status, data }) => {\n                    if (status === 'success') {\n                        this.removeForm()\n                        this.removeRow(id)\n                    } else {\n                        notice.find('.error').html(data)\n                        notice.removeClass('hidden').addClass('notice')\n                    }\n                })\n                request.fail((data) => {\n                    notice.removeClass('hidden').addClass('notice')\n                })\n                request.always((data) => {\n                    button.removeAttr('disabled')\n                    spinner.removeClass('is-active')\n                })\n            }\n        }\n\n        /**\n         * Update the edited row or add new row\n         *\n         * @param {object} params\n         */\n        updateRow = ({ formData: { id = null }, data }) => {\n            if (! id) {\n                this.list.prepend(data)\n            } else {\n                this.list.find(`input[name='slug'][value='${id}']`).parents('tr').replaceWith(data)\n            }\n        }\n\n        /**\n         * Remove the deleted row\n         *\n         * @param {int} id\n         */\n        removeRow = (id) => {\n            this.list.find(`input[name='slug'][value='${id}']`).parents('tr').remove()\n        }\n\n    }\n\n    new Settings()\n\n})(jQuery)\n\n"]}